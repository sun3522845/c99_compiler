#!/usr/bin/python

opcodes = """
label
or
xor
and
left_shift
right_shift
add
subtract
multiply
divide
modular
negative
complement
increase
decrease
address
load
store
jump
jump_equal
jump_not_equal
jump_little
jump_great
jump_little_equal
jump_great_equal
extend
shrink
move
copy
push
pop
call
return
"""

lines = opcodes.split("\n")
opcodes = []
for line in lines:
    if line == "":
        continue
    fields = line.split(" ")
    opcodes.append(fields[0])

def print_head():
    print "// Generated by opcode.py"
    print "#ifndef _OPCODE_H"
    print "#define _OPCODE_H"
    print
    print "enum {"

    for opcode in opcodes:
        print "    OPCODE_%s," % opcode.upper()
    print "    OPCODE_NUMBER,"
    print "};"
    print

    print "struct insn_t;"
    print "typedef void (*insn_handler_t)(insn_t*);"
    print "extern insn_handler_t insn_handler_array[];"
    print "extern char *opcode_name_array[];"
    print

    for opcode in opcodes:
        print "extern void insn_%s(insn_t *);" % opcode
    print
    print "extern void output_epilogue(char *name, int local_size);"
    print "extern void output_prologue();"
    print "#endif"

def print_body():
    print '#include "root.h"'
    print '#include "opcode.h"'
    print

    print "// Generated by opcode.py"
    print "char *opcode_name_array[] = {"
    for opcode in opcodes:
        print "    \"%s\"," % opcode
    print "};"
    print

    print "insn_handler_t insn_handler_array[] = {"
    for opcode in opcodes:
        print "    &insn_%s," % opcode
    print "};"

def print_insn_list():
    for opcode in opcodes:
        print "void insn_%s(insn_t *insn)" % opcode
        print "{"
        print "}"
        print

import posix
import sys
def redirect_stdout(file_name):
    file = open(file_name, "w")
    posix.dup2(file.fileno(), 1)

redirect_stdout("opcode.h")
print_head()
sys.stdout.flush()

redirect_stdout("opcode.cc")
print_body()
sys.stdout.flush()
